# generated by datamodel-codegen:
#   filename:  https://api.glassflow.dev/v1/openapi.yaml
#   version:   0.26.
# ruff: noqa

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class Error(BaseModel):
    detail: str


class CreateOrganization(BaseModel):
    name: str


class Organization(CreateOrganization):
    id: str


class OrganizationScope(Organization):
    role: str


class OrganizationScopes(RootModel[List[OrganizationScope]]):
    root: List[OrganizationScope]


class SignUp(BaseModel):
    access_token: str
    id_token: str


class BasePipeline(BaseModel):
    name: str
    space_id: str
    metadata: Dict[str, Any]


class PipelineState(str, Enum):
    running = "running"
    paused = "paused"


class FunctionEnvironment(BaseModel):
    name: str
    value: str


class FunctionEnvironments(RootModel[Optional[List[FunctionEnvironment]]]):
    root: Optional[List[FunctionEnvironment]] = None


class Kind(str, Enum):
    google_pubsub = "google_pubsub"


class Config(BaseModel):
    project_id: str
    subscription_id: str
    credentials_json: str


class SourceConnector1(BaseModel):
    kind: Kind
    config: Config


class Kind1(str, Enum):
    amazon_sqs = "amazon_sqs"


class Config1(BaseModel):
    queue_url: str
    aws_region: str
    aws_access_key: str
    aws_secret_key: str


class SourceConnector2(BaseModel):
    kind: Kind1
    config: Config1


class Kind2(str, Enum):
    postgres = "postgres"


class Config2(BaseModel):
    db_host: str
    db_port: Optional[str] = "5432"
    db_user: str
    db_pass: str
    db_name: str
    db_sslmode: Optional[str] = None
    replication_slot: str
    publication: Optional[str] = None
    replication_output_plugin_name: Optional[str] = "wal2json"
    replication_output_plugin_args: Optional[List[str]] = None


class SourceConnector3(BaseModel):
    kind: Kind2
    config: Config2


class SourceConnector(
    RootModel[Optional[Union[SourceConnector1, SourceConnector2, SourceConnector3]]]
):
    root: Optional[Union[SourceConnector1, SourceConnector2, SourceConnector3]] = None


class Kind3(str, Enum):
    webhook = "webhook"


class Method(str, Enum):
    get = "GET"
    post = "POST"
    put = "PUT"
    patch = "PATCH"
    delete = "DELETE"


class Header(BaseModel):
    name: str
    value: str


class Config3(BaseModel):
    url: str
    method: Method
    headers: List[Header]


class SinkConnector1(BaseModel):
    kind: Kind3
    config: Config3


class Kind4(str, Enum):
    clickhouse = "clickhouse"


class Config4(BaseModel):
    addr: str
    database: str
    username: str
    password: str
    table: str


class SinkConnector2(BaseModel):
    kind: Kind4
    config: Config4


class Kind5(str, Enum):
    amazon_s3 = "amazon_s3"


class Config5(BaseModel):
    s3_bucket: str
    s3_key: str
    aws_region: str
    aws_access_key: str
    aws_secret_key: str


class SinkConnector3(BaseModel):
    kind: Kind5
    config: Config5


class Kind6(str, Enum):
    snowflake_cdc_json = "snowflake_cdc_json"


class Config6(BaseModel):
    account: str
    warehouse: str
    db_user: str
    db_pass: str
    db_name: str
    db_schema: str
    db_host: Optional[str] = None
    db_port: Optional[str] = "443"
    db_role: Optional[str] = None


class SinkConnector4(BaseModel):
    kind: Kind6
    config: Config6


class Kind7(str, Enum):
    pinecone_json = "pinecone_json"


class ClientHeader(BaseModel):
    name: str
    value: str


class Config7(BaseModel):
    api_key: str
    api_host: str
    api_source_tag: Optional[str] = None
    index_host: str
    client_headers: Optional[List[ClientHeader]] = None


class SinkConnector5(BaseModel):
    kind: Kind7
    config: Config7


class Kind8(str, Enum):
    mongodb_json = "mongodb_json"


class Config8(BaseModel):
    connection_uri: str
    db_name: str


class SinkConnector6(BaseModel):
    kind: Kind8
    config: Config8


class SinkConnector(
    RootModel[
        Optional[
            Union[
                SinkConnector1,
                SinkConnector2,
                SinkConnector3,
                SinkConnector4,
                SinkConnector5,
                SinkConnector6,
            ]
        ]
    ]
):
    root: Optional[
        Union[
            SinkConnector1,
            SinkConnector2,
            SinkConnector3,
            SinkConnector4,
            SinkConnector5,
            SinkConnector6,
        ]
    ] = None


class Pipeline(BasePipeline):
    id: str
    created_at: AwareDatetime
    state: PipelineState


class SpacePipeline(Pipeline):
    space_name: str


class GetDetailedSpacePipeline(SpacePipeline):
    source_connector: SourceConnector
    sink_connector: SinkConnector
    environments: FunctionEnvironments


class PipelineFunctionOutput(BaseModel):
    environments: FunctionEnvironments


class SpacePipelines(RootModel[List[SpacePipeline]]):
    root: List[SpacePipeline]


class CreateSpace(BaseModel):
    name: str


class UpdateSpace(BaseModel):
    name: str


class Space(CreateSpace):
    id: str
    created_at: AwareDatetime


class SpaceScope(Space):
    permission: str


class SpaceScopes(RootModel[List[SpaceScope]]):
    root: List[SpaceScope]


class Payload(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    message: str


class SeverityCodeInput(int, Enum):
    integer_100 = 100
    integer_200 = 200
    integer_400 = 400
    integer_500 = 500


class SeverityCode(RootModel[int]):
    root: int


class CreateAccessToken(BaseModel):
    name: str


class AccessToken(CreateAccessToken):
    id: str
    token: str
    created_at: AwareDatetime


class AccessTokens(RootModel[List[AccessToken]]):
    root: List[AccessToken]


class PaginationResponse(BaseModel):
    total_amount: int


class SourceFile(BaseModel):
    name: str
    content: str


class SourceFiles(RootModel[List[SourceFile]]):
    root: List[SourceFile]


class EventContext(BaseModel):
    request_id: str
    external_id: Optional[str] = None
    receive_time: AwareDatetime


class PersonalAccessToken(RootModel[str]):
    root: str


class QueryRangeMatrix(RootModel[Optional[Any]]):
    root: Optional[Any] = None


class Profile(BaseModel):
    id: str
    home_organization: Organization
    name: str
    email: str
    provider: str
    external_settings: Any
    subscriber_id: str


class ListOrganizationScopes(PaginationResponse):
    organizations: OrganizationScopes


class UpdatePipeline(BaseModel):
    name: str
    transformation_function: Optional[str] = None
    transformation_requirements: Optional[List[str]] = None
    requirements_txt: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    source_connector: Optional[SourceConnector] = None
    sink_connector: Optional[SinkConnector] = None
    environments: Optional[FunctionEnvironments] = None


class CreatePipeline(BasePipeline):
    transformation_function: Optional[str] = None
    transformation_requirements: Optional[List[str]] = None
    requirements_txt: Optional[str] = None
    source_connector: Optional[SourceConnector] = None
    sink_connector: Optional[SinkConnector] = None
    environments: Optional[FunctionEnvironments] = None
    state: Optional[PipelineState] = None


class ListPipelines(PaginationResponse):
    pipelines: SpacePipelines


class ListSpaceScopes(PaginationResponse):
    spaces: SpaceScopes


class FunctionLogEntry(BaseModel):
    level: str
    severity_code: SeverityCode
    timestamp: AwareDatetime
    payload: Payload


class ListAccessTokens(PaginationResponse):
    access_tokens: AccessTokens


class ConsumeInputEvent(BaseModel):
    req_id: Optional[str] = Field(None, description="DEPRECATED")
    receive_time: Optional[AwareDatetime] = Field(None, description="DEPRECATED")
    payload: Any
    event_context: EventContext


class ConsumeOutputEvent(BaseModel):
    req_id: Optional[str] = Field(None, description="DEPRECATED")
    receive_time: Optional[AwareDatetime] = Field(None, description="DEPRECATED")
    payload: Any
    event_context: EventContext
    status: str
    response: Optional[Any] = None
    error_details: Optional[str] = None
    stack_trace: Optional[str] = None


class ListPersonalAccessTokens(BaseModel):
    tokens: List[PersonalAccessToken]


class PipelineInputQueueRelativeLatencyMetricsResponse(BaseModel):
    input_queue_total_push_events: QueryRangeMatrix
    input_queue_latency: QueryRangeMatrix


class FunctionLogs(RootModel[List[FunctionLogEntry]]):
    root: List[FunctionLogEntry]
